import React from "react";
import { FaBehance, FaDiscord, FaLinkedin, FaTwitter } from "react-icons/fa";
export const links = [
  {
    id: 1,
    url: "/Yol Haritaları",
    text: "Yol Haritaları",
  },
  {
    id: 2,
    url: "/",
    text: "LeetCode",
  },
  {
    id: 3,
    url: "/Ethernaut",
    text: "Ethernaut",
  },
  {
    id: 4,
    url: "/Algoritmalar",
    text: "Algoritmalar",
  },
];

export const social = [
  {
    id: 1,
    url: "https://discord.gg/PreBDJg48r",
    icon: <FaDiscord />,
  },
  {
    id: 2,
    url: "https://twitter.com/_DevCom",
    icon: <FaTwitter />,
  },
  {
    id: 3,
    url: "https://www.linkedin.com/company/trdevelopercommunity/",
    icon: <FaLinkedin />,
  },
];
const menu = [
  {
    id: 1,
    title: "#1 - Two of Sum",
    category: "Array",
    img: "./images/two of sum.jpg",
    url: "https://www.youtube.com/watch?v=z4ORRdgWuB4",
  },
  {
    id: 2,
    title: "#206 - Reverse Linked List",
    category: "Linked List",
    img: "./images/206 reverse linked list.jpg",
    url: "https://www.youtube.com/watch?v=hQza6dYI2AM",
  },
  {
    id: 3,
    title: "#104 - Maximum Depth of Binary Tree",
    category: "Binary Tree",
    img: "./images/104 maximum depth of binary tree.jpg",
    url: "https://www.youtube.com/watch?v=Ww0YFz9_V2s",
  },
  {
    id: 4,
    title: "#125 - Valid Palindrome",
    category: "String",
    img: "./images/125 Valid Palindrome.jpg",
    url: "https://www.youtube.com/watch?v=l7E0Dl2M5gs",
  },
  {
    id: 5,
    title: "#19 - Remove Nth Node From End of List",
    category: "Linked List",
    img: "./images/19 Remove Nth Node From End of List.jpg",
    url: "https://www.youtube.com/watch?v=nBfliKBIQeU",
  },
  {
    id: 6,
    title: "#102 - Binary Tree Level Order Traversal",
    category: "Binary Tree",
    img: "./images/item-6.jpeg",
    url: "https://www.youtube.com/watch?v=CplPd_M-sAw",
  },
  {
    id: 7,
    title: "#54 - Spiral Matrix",
    category: "Matrix",
    img: "./images/54 spiral matrix.jpg",
    url: "https://www.youtube.com/watch?v=VRKlggqMhuA",
  },
  {
    id: 8,
    title: "#300 - Longest Increasing Subsequence",
    category: "Dynamic Programming",
    img: "./images/300 Longest Increasing Subsequence.jpg",
    url: "https://www.youtube.com/watch?v=AJkBMCh7B0k",
  },
  {
    id: 9,
    title: "#33 - Search in Rotated Sorted Array",
    category: "Array",
    img: "./images/33 search in rotated sorted array.jpg",
    url: "https://www.youtube.com/watch?v=yl6al9ib91c",
  },
  {
    id: 10,
    title: "#56 - Merge Intervals",
    category: "Interval",
    img: "./images/56 merge intervals.jpg",
    url: "https://www.youtube.com/watch?v=VcHMax6Pat8",
  },
  {
    id: 11,
    title: "#338 - Counting Bits",
    category: "Binary",
    img: "./images/338 counting bits.jpg",
    url: "https://www.youtube.com/watch?v=YtwJK1qI4Yc",
  },
  {
    id: 12,
    title: "#647 - Palindrome Substrings",
    category: "String",
    img: "./images/647 Palindromic Substrings.jpg",
    url: "https://www.youtube.com/watch?v=6iypO-yjIAI",
  },
  {
    id: 13,
    title: "#547 - Number of Provinces",
    category: "Graph",
    img: "./images/547 Number of Provinces.jpg",
    url: "https://www.youtube.com/watch?v=FJ1NnLkddKw",
  },
  {
    id: 14,
    title: "#572 - Subtree of Another Tree",
    category: "Binary Tree",
    img: "./images/572 Subtree of Another Tree.jpg",
    url: "https://www.youtube.com/watch?v=kowYAx-LEIg",
  },
  {
    id: 15,
    title: "#1318 - Minimum Flips to Make a OR b Equal to c",
    category: "Binary",
    img: "./images/1318 Min Flips to make.jpg",
    url: "https://www.youtube.com/watch?v=OGmxBSZqgN8",
  },
  {
    id: 16,
    title: "#139 - Word Break",
    category: "Dynamic Programming",
    img: "./images/139 Word Break.jpg",
    url: "https://www.youtube.com/watch?v=GDTWoIR9BNU",
  },
  {
    id: 17,
    title: "#70 - Climbing Stairs",
    category: "Dynamic Programming",
    img: "./images/70 Climbing Stairs.jpg",
    url: "https://www.youtube.com/watch?v=8dQbsakGXpI",
  },
  {
    id: 18,
    title: "#238 - Product of Array Except Self",
    category: "Array",
    img: "./images/238 Product of Array Except Self.jpg",
    url: "https://www.youtube.com/watch?v=m0E9LKiP4uw",
  },
  {
    id: 19,
    title: "#105 - Construct Binary Tree From Preorder and Inorder Traversal",
    category: "Binary Tree",
    img: "./images/105 Construct Binary Tree from Preorder and Inorder Traversal.jpg",
    url: "https://www.youtube.com/watch?v=9sIQloyS-vM",
  },
  {
    id: 20,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 21,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 22,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 23,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 24,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 25,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
  {
    id: 26,
    title: "#54 - Spiral Matrix",
    category: " ",
    img: "./images/ ",
    url: "",
  },
];
export const Ethernaut = [
  {
    id: 1,
    title: "buttermilk pancakes",
    category: "breakfast",
    img: "./images/item-1.jpeg",
    url: "https://www.youtube.com/@CagatayAkkas/videos",
    desc: `I'm baby woke mlkshk wolf bitters live-edge blue bottle, hammock freegan copper mug whatever cold-pressed `,
  },
];
export default menu;
